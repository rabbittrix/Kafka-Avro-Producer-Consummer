/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jrsf;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6290788712989359018L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"com.jrsf\",\"fields\":[{\"name\":\"idPainel\",\"type\":\"int\"},{\"name\":\"idEventLog\",\"type\":\"int\"},{\"name\":\"eventState\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"painelDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"NA\"},{\"name\":\"eventTimestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int idPainel;
   private int idEventLog;
   private java.lang.String eventState;
   private java.lang.String eventDescription;
   private java.lang.String painelDescription;
   private java.lang.String eventTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param idPainel The new value for idPainel
   * @param idEventLog The new value for idEventLog
   * @param eventState The new value for eventState
   * @param eventDescription The new value for eventDescription
   * @param painelDescription The new value for painelDescription
   * @param eventTimestamp The new value for eventTimestamp
   */
  public Customer(java.lang.Integer idPainel, java.lang.Integer idEventLog, java.lang.String eventState, java.lang.String eventDescription, java.lang.String painelDescription, java.lang.String eventTimestamp) {
    this.idPainel = idPainel;
    this.idEventLog = idEventLog;
    this.eventState = eventState;
    this.eventDescription = eventDescription;
    this.painelDescription = painelDescription;
    this.eventTimestamp = eventTimestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idPainel;
    case 1: return idEventLog;
    case 2: return eventState;
    case 3: return eventDescription;
    case 4: return painelDescription;
    case 5: return eventTimestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idPainel = (java.lang.Integer)value$; break;
    case 1: idEventLog = (java.lang.Integer)value$; break;
    case 2: eventState = value$ != null ? value$.toString() : null; break;
    case 3: eventDescription = value$ != null ? value$.toString() : null; break;
    case 4: painelDescription = value$ != null ? value$.toString() : null; break;
    case 5: eventTimestamp = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'idPainel' field.
   * @return The value of the 'idPainel' field.
   */
  public int getIdPainel() {
    return idPainel;
  }



  /**
   * Gets the value of the 'idEventLog' field.
   * @return The value of the 'idEventLog' field.
   */
  public int getIdEventLog() {
    return idEventLog;
  }



  /**
   * Gets the value of the 'eventState' field.
   * @return The value of the 'eventState' field.
   */
  public java.lang.String getEventState() {
    return eventState;
  }



  /**
   * Gets the value of the 'eventDescription' field.
   * @return The value of the 'eventDescription' field.
   */
  public java.lang.String getEventDescription() {
    return eventDescription;
  }



  /**
   * Gets the value of the 'painelDescription' field.
   * @return The value of the 'painelDescription' field.
   */
  public java.lang.String getPainelDescription() {
    return painelDescription;
  }



  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public java.lang.String getEventTimestamp() {
    return eventTimestamp;
  }



  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static com.jrsf.Customer.Builder newBuilder() {
    return new com.jrsf.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.jrsf.Customer.Builder newBuilder(com.jrsf.Customer.Builder other) {
    if (other == null) {
      return new com.jrsf.Customer.Builder();
    } else {
      return new com.jrsf.Customer.Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.jrsf.Customer.Builder newBuilder(com.jrsf.Customer other) {
    if (other == null) {
      return new com.jrsf.Customer.Builder();
    } else {
      return new com.jrsf.Customer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private int idPainel;
    private int idEventLog;
    private java.lang.String eventState;
    private java.lang.String eventDescription;
    private java.lang.String painelDescription;
    private java.lang.String eventTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jrsf.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idPainel)) {
        this.idPainel = data().deepCopy(fields()[0].schema(), other.idPainel);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.idEventLog)) {
        this.idEventLog = data().deepCopy(fields()[1].schema(), other.idEventLog);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.eventState)) {
        this.eventState = data().deepCopy(fields()[2].schema(), other.eventState);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventDescription)) {
        this.eventDescription = data().deepCopy(fields()[3].schema(), other.eventDescription);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.painelDescription)) {
        this.painelDescription = data().deepCopy(fields()[4].schema(), other.painelDescription);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[5].schema(), other.eventTimestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jrsf.Customer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.idPainel)) {
        this.idPainel = data().deepCopy(fields()[0].schema(), other.idPainel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.idEventLog)) {
        this.idEventLog = data().deepCopy(fields()[1].schema(), other.idEventLog);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventState)) {
        this.eventState = data().deepCopy(fields()[2].schema(), other.eventState);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventDescription)) {
        this.eventDescription = data().deepCopy(fields()[3].schema(), other.eventDescription);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.painelDescription)) {
        this.painelDescription = data().deepCopy(fields()[4].schema(), other.painelDescription);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[5].schema(), other.eventTimestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'idPainel' field.
      * @return The value.
      */
    public int getIdPainel() {
      return idPainel;
    }


    /**
      * Sets the value of the 'idPainel' field.
      * @param value The value of 'idPainel'.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder setIdPainel(int value) {
      validate(fields()[0], value);
      this.idPainel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idPainel' field has been set.
      * @return True if the 'idPainel' field has been set, false otherwise.
      */
    public boolean hasIdPainel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idPainel' field.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder clearIdPainel() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'idEventLog' field.
      * @return The value.
      */
    public int getIdEventLog() {
      return idEventLog;
    }


    /**
      * Sets the value of the 'idEventLog' field.
      * @param value The value of 'idEventLog'.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder setIdEventLog(int value) {
      validate(fields()[1], value);
      this.idEventLog = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'idEventLog' field has been set.
      * @return True if the 'idEventLog' field has been set, false otherwise.
      */
    public boolean hasIdEventLog() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'idEventLog' field.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder clearIdEventLog() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventState' field.
      * @return The value.
      */
    public java.lang.String getEventState() {
      return eventState;
    }


    /**
      * Sets the value of the 'eventState' field.
      * @param value The value of 'eventState'.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder setEventState(java.lang.String value) {
      validate(fields()[2], value);
      this.eventState = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventState' field has been set.
      * @return True if the 'eventState' field has been set, false otherwise.
      */
    public boolean hasEventState() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventState' field.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder clearEventState() {
      eventState = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventDescription' field.
      * @return The value.
      */
    public java.lang.String getEventDescription() {
      return eventDescription;
    }


    /**
      * Sets the value of the 'eventDescription' field.
      * @param value The value of 'eventDescription'.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder setEventDescription(java.lang.String value) {
      validate(fields()[3], value);
      this.eventDescription = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventDescription' field has been set.
      * @return True if the 'eventDescription' field has been set, false otherwise.
      */
    public boolean hasEventDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventDescription' field.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder clearEventDescription() {
      eventDescription = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'painelDescription' field.
      * @return The value.
      */
    public java.lang.String getPainelDescription() {
      return painelDescription;
    }


    /**
      * Sets the value of the 'painelDescription' field.
      * @param value The value of 'painelDescription'.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder setPainelDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.painelDescription = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'painelDescription' field has been set.
      * @return True if the 'painelDescription' field has been set, false otherwise.
      */
    public boolean hasPainelDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'painelDescription' field.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder clearPainelDescription() {
      painelDescription = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public java.lang.String getEventTimestamp() {
      return eventTimestamp;
    }


    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder setEventTimestamp(java.lang.String value) {
      validate(fields()[5], value);
      this.eventTimestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public com.jrsf.Customer.Builder clearEventTimestamp() {
      eventTimestamp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        record.idPainel = fieldSetFlags()[0] ? this.idPainel : (java.lang.Integer) defaultValue(fields()[0]);
        record.idEventLog = fieldSetFlags()[1] ? this.idEventLog : (java.lang.Integer) defaultValue(fields()[1]);
        record.eventState = fieldSetFlags()[2] ? this.eventState : (java.lang.String) defaultValue(fields()[2]);
        record.eventDescription = fieldSetFlags()[3] ? this.eventDescription : (java.lang.String) defaultValue(fields()[3]);
        record.painelDescription = fieldSetFlags()[4] ? this.painelDescription : (java.lang.String) defaultValue(fields()[4]);
        record.eventTimestamp = fieldSetFlags()[5] ? this.eventTimestamp : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.idPainel);

    out.writeInt(this.idEventLog);

    out.writeString(this.eventState);

    out.writeString(this.eventDescription);

    out.writeString(this.painelDescription);

    out.writeString(this.eventTimestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.idPainel = in.readInt();

      this.idEventLog = in.readInt();

      this.eventState = in.readString();

      this.eventDescription = in.readString();

      this.painelDescription = in.readString();

      this.eventTimestamp = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.idPainel = in.readInt();
          break;

        case 1:
          this.idEventLog = in.readInt();
          break;

        case 2:
          this.eventState = in.readString();
          break;

        case 3:
          this.eventDescription = in.readString();
          break;

        case 4:
          this.painelDescription = in.readString();
          break;

        case 5:
          this.eventTimestamp = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










